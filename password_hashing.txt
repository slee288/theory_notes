In user authentication, password hashing is a very important technique for securely storing user data.
These are the steps for password hashing:

1. Add a salt to the password 
    Salt is a random string of characters that are appended to the user's password before hashing. 
    Salting is essential as it is almost impossible to reverse-engineer the hashed value, even when the database has been compromised by an attacker.

2. Encrypt the salted password 



In python, we can achieve this with "bcrypt" module. It provides an easy-to-use interface for password hashing.
Two essential functions:
    - bcrypt.gensalt(): generates a salt value 
    - bcrypt.hashpw(password, salt): hashes the password with the salt 


Javascript is also similar, we need a "bcrypt" library.
The syntax is a little different than python.
    -   const salt = await bcrypt.genSalt(saltRounds, (err, salt) => {...})
        const pw = await bcrypt.hash(password, salt, (err, hash) => {...}) 